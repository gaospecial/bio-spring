<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Hugo Prose</title>
    <link>/categories/git/</link>
    <description>Recent content in git on Hugo Prose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 和 GitHub 使用指北</title>
      <link>/post/2019/09/29/git-github-tutorial/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/09/29/git-github-tutorial/</guid>
      <description>今天小丫画图群里在讨论 GitHub 的使用。大家都说GitHub的使用挺简单的，我觉得也是。但是，要找一个比较系统的介绍的话，我还真没找到。所以，说说自己的使用经历吧。这些都是干货。
我对 GitHub 的使用时间不长，但是觉得真是个好东西。总的来说，特别适合于存放文本文件，例如代码，markdown写成的文档，rmarkdown写成的书等。
GitHub其实是支持Git版本控制软件的公共仓库，类似的网站其实不止一个，但是GitHub是最流行的一个。
所以，要想使用GitHub，你必须做的只有两件事：一、安装一个Git客户端点击下载。二、在GitHub注册一个账号点击注册。这两步操作按住不提。
使用 Git 在Windows下面，安装完Git客户端之后，鼠标右键菜单中会多出来两个命令：“Git GUI here”和“Git Bash here”。前者打开一个图形界面，后者打开一个终端。使用这两个传送门便可以进入Git的世界。
如果当前的目录是一个Git目录，则自动会被Git识别出来。否则，你可以选择“新建一个”或者“克隆”一个。
Git 常用操作 Git常用的命令有下面几个：
git init sample 在当前目录新建一个“sample”目录，在目录中启用Git版本控制系统。
git clone https://github.com/GuangchuangYu/course_bioinfo_training.git 从GitHub克隆一个软件源到当前目录。这将在当前目录新建一个“course_bioinfo_training”文件夹，其中包含所有文件和版本历史。
git status 显示当前Git仓库的状态。如果有修改，新建，删除等操作，将会自动列举出来。
git add newfile.R newfile.R 是一个新建的文件，其中我写了一些代码。要使用Git纪录版本历史，必须将其添加进来。
git commit 或者 git commit -a 这个命令将生成一次操作，系统会打开默认的文本编辑器，让你写一下操作的主要内容。
GitHub 的使用 GitHub 事实上提供了一个远程 Git 仓库。这个远程仓库与本地仓库是关联在一起的，但有相互独立。在上面，我们已经使用过了 git pull 命令，这个命令就是从远程向本地输送。与之对应，git push 是本地向远程服务器传输，将本地的修改记录在服务器中。
在 push 的过程中，需要验证身份，因此，我们需要配置认证信息。
GitHub 配置 SSH 密钥 SSH 密钥是成对的，包括公钥和私钥，公钥登记到 GitHub 网站，私钥存储在本地计算机（私有）。
密钥在本地生成。点击鼠标右键，选择“Git Bash here”，输入下列命令将生成一对SSH密钥。 默认情况下，私钥保存在 “~/.ssh/id_rsa” 文件中，公钥保存在 “~/.</description>
    </item>
    
    <item>
      <title>RStudio 中使用 Git push 时要求输入用户名和密码</title>
      <link>/post/2019/09/20/rstudio-git-push/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/09/20/rstudio-git-push/</guid>
      <description>昨天遇到一个怪事，同一个 Git 目录，使用 Git Shell 时，可以直接 Push；而在 RStudio 中 push 时，则会请求输入账户名和密码。
在 Google 中以 “Rstudio git push need username” 搜索，在第三条结果的第三个高票回答中找到了解决方法。
git remote show origin # Push URL: https://github.com/username/reponame.git git remote set-url origin git+ssh://git@github.com/username/reponame.git 想起来，似乎是因为设置 usethis &amp;ldquo;options&amp;rdquo; 时候选择了 “usethis.protocol = &amp;ldquo;ssh&amp;rdquo; ” 所致。
# usethis options options( usethis.full_name = &amp;quot;Chun-Hui Gao&amp;quot;, usethis.description = list( `Authors@R` = &#39;person(&amp;quot;Chun-Hui&amp;quot;, &amp;quot;Gao&amp;quot;, email = &amp;quot;gaospecial@gmail.com&amp;quot;, role = c(&amp;quot;aut&amp;quot;, &amp;quot;cre&amp;quot;), comment = c(ORCID = &amp;quot;0000-0002-1445-7939&amp;quot;))&#39;, License = &amp;quot;GPL3 + file LICENSE&amp;quot;, Version = &amp;quot;0.</description>
    </item>
    
    <item>
      <title>使用腾讯云开发平台代码托管服务</title>
      <link>/post/2019/07/08/tencent-dev/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/08/tencent-dev/</guid>
      <description>腾讯云开发平台几大优势：
国内访问快 免费空间大 仓库私有 用户名好起（gaoch通过了） 对于已有的Git项目，可以通过下列途径关联。
# 首先在服务器控制面板创建一个同名项目 # 参考这里：https://dev.tencent.com/help/git-import-tencentcloud # 事实上，不用这么麻烦 git remote rm origin git remote add origin https://git.dev.tencent.com/gaoch/myproject.git git push --set-upstream origin master 然后我发现了腾讯云开发平台代码托管服务的一大缺点是：URL太长了。</description>
    </item>
    
    <item>
      <title>设置私有 Git 服务器</title>
      <link>/post/2018/12/29/private-git-server/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/12/29/private-git-server/</guid>
      <description>既然说到 Git，GitHub 你一定是了解的。GitHub 对于私有仓库是收费的。如果你项目还在进行中，需要一个仓库却又不想付高昂的服务费。使用自己的服务器当然也是可以的，而且很方便。
自己的服务器可以是阿里云这样的主机服务商，也可以是你能访问的任意一台Linux主机。只要能够 SSH 登录即可。
从服务器中开始 如果你的文件目前存储在服务器端，想在本地开展工作并使用服务器同步更新，可以参考下面的操作。
服务器端配置 添加一个新用户(也可以使用原有用户). adduser git 在添加用户git时, 会创建 /home/git 目录, 同时还会创建 git 用户组.
在服务器上创建一个git仓库(&amp;ldquo;sample&amp;rdquo;). cd /home/git mkdir sample.git git init --bare sample.git # 由于使用的是 root 用户新建的文件夹, 需要修订文件夹权限 chown -R git:git sample.git 添加git的ssh认证. mkdir /home/git/.ssh cat ~/.ssh/authorized_keys &amp;lt;&amp;lt; EOF 将你的 ssh.pub 公钥粘贴到这里, 每行一个人. 将合作用户的 公钥粘贴到这里, 每行一个人. EOF 你的 ssh.pub 公钥可以在本地电脑上使用cat ~/.ssh/id_rsa.pub查看.
客户端操作 从服务器clone repository. git clone git@remote.com:/home/git/sample.git 添加内容, 修改, 更新&amp;hellip;. cd sample cat &amp;gt; README &amp;lt;&amp;lt; EOF This is readme.</description>
    </item>
    
  </channel>
</rss>
