<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>igraph on Hugo Prose</title>
    <link>/tags/igraph/</link>
    <description>Recent content in igraph on Hugo Prose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/igraph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>igraph matrices</title>
      <link>/post/2020/02/26/igraph-matrices/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/02/26/igraph-matrices/</guid>
      <description>关联矩阵（incidence matrix）我们生成的这个矩阵的原型是一个引证关系矩阵。矩阵中的三行代表3篇文献，四列代表4篇引文。1/2/3/4是在A/B/C前面发表的文献,A/B/C是后来发表的文献。其中文献A引用了3/4，文献B引用了1/2/4，文献C引用了1/2/4。
library(igraph)library(Matrix)set.seed(3)m &amp;lt;- matrix(data = sample(0:1, 12, replace = TRUE),nrow = 3)rownames(m) &amp;lt;- LETTERS[1:3]colnames(m) &amp;lt;- 1:4m## 1 2 3 4## A 0 0 1 1## B 1 1 0 1## C 1 1 0 1这样的一个引证关系，可以用下面的图表示。
在bibliometrix::cocMatrix() 中将这种矩阵称为共现矩阵，Co-occurrence Matrix。
par(mar=c(1,1,1,1))g1 &amp;lt;- graph_from_incidence_matrix(m,directed = TRUE,mode = &amp;quot;out&amp;quot;) plot(g1)上面的矩阵通过矩阵叉乘可以得到不同的邻接矩阵，用于生成新的网络。
矩阵和向量的计算矩阵的点乘就是矩阵各个对应元素相乘, 这个时候要求两个矩阵必须同样大小。
https://blog.csdn.net/u013066730/article/details/57462299
矩阵的叉乘（乘法）就是矩阵A的第一行乘以矩阵B的第一列，各个元素对应相乘然后求和作为第一元素的值。矩阵只有当左边矩阵的列数等于右边矩阵的行数时才可以相乘,乘积矩阵的行数等于左边矩阵的行数,乘积矩阵的列数等于右边矩阵的列数。</description>
    </item>
    
    <item>
      <title>igraph: 生成网络</title>
      <link>/post/2020/02/26/igraph-make-graph/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/02/26/igraph-make-graph/</guid>
      <description>library(igraph)notable_graph &amp;lt;- c(&amp;quot;Bull&amp;quot;, &amp;quot;Chvatal&amp;quot;, &amp;quot;Coxeter&amp;quot;, &amp;quot;Cubical&amp;quot;, &amp;quot;Diamond&amp;quot;, &amp;quot;Dodecahedral&amp;quot;, &amp;quot;Dodecahedron&amp;quot;, &amp;quot;Folkman&amp;quot;, &amp;quot;Franklin&amp;quot;, &amp;quot;Frucht&amp;quot;, &amp;quot;Grotzsch&amp;quot;, &amp;quot;Heawood&amp;quot;, &amp;quot;Herschel&amp;quot;, &amp;quot;House&amp;quot;, &amp;quot;HouseX&amp;quot;, &amp;quot;Icosahedral&amp;quot;, &amp;quot;Icosahedron&amp;quot;, &amp;quot;Krackhardt kite&amp;quot;, &amp;quot;Levi&amp;quot;, &amp;quot;McGee&amp;quot;, &amp;quot;Meredith&amp;quot;, &amp;quot;Noperfectmatching&amp;quot;, &amp;quot;Nonline&amp;quot;, &amp;quot;Octahedral&amp;quot;, &amp;quot;Octahedron&amp;quot;, &amp;quot;Petersen&amp;quot;, &amp;quot;Robertson&amp;quot;, &amp;quot;Smallestcyclicgroup&amp;quot;, &amp;quot;Tetrahedral&amp;quot;, &amp;quot;Tetrahedron&amp;quot;, &amp;quot;Thomassen&amp;quot;, &amp;quot;Tutte&amp;quot;, &amp;quot;Uniquely3colorable&amp;quot;, &amp;quot;Walther&amp;quot;, &amp;quot;Zachary&amp;quot;)graph &amp;lt;- lapply(notable_graph,make_graph)make_graph() 一共支持 35 个内置图形。
par(mfrow=c(5,7))success &amp;lt;- lapply(notable_graph, function(x){graph &amp;lt;- make_graph(x)par(mar=c(1,1,1,1))plot(graph, main = x)})make_star(10) %&amp;gt;% plotmake_de_bruijn_graph(3,4) %&amp;gt;% plotmake_full_graph(10) %&amp;gt;% plotmake_kautz_graph(3,4) %&amp;gt;% plot</description>
    </item>
    
  </channel>
</rss>
