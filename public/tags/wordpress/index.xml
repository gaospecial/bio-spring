<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wordpress on Hugo Prose</title>
    <link>/tags/wordpress/</link>
    <description>Recent content in wordpress on Hugo Prose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>无缝切换到DISQUS评论系统</title>
      <link>/post/2019/02/15/2019-02-15-switch-to-disqus/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/15/2019-02-15-switch-to-disqus/</guid>
      <description>今天发表评论的时候发现服务器报错HTTP ERROR 405，查了一下Google没发现什么解决办法。索性就坡下驴，转换为DISQUS评论系统。
在插件中搜索Disqus，安装之。随后在后台菜单侧栏会出现Disqus标签（我在设置里面找了半天会告诉你吗），然后根据向导操作即可。
安装完成后，自动取代WordPress自带的评论功能，还可以一键导入WordPress已有评论，简直不能太方便。
OK，就这样。</description>
    </item>
    
    <item>
      <title>整合 OSS 开放存储到 WordPress 系统</title>
      <link>/post/2015/08/23/2015-08-23-cloudfs-wp-uploads/</link>
      <pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/08/23/2015-08-23-cloudfs-wp-uploads/</guid>
      <description>使用 OSS 存储 WordPress 相当于将 云服务器 的存储免费扩大了。
安装cloudfs -在云市场搜索cloudfs，获取下载链接。
-将下载的安装包上传至云服务器。
-安装依赖包。
-以默认设置安装。
[cc lang=”bash”]
# Install dependence
apt-get install libcurl4-openssl-dev libssl-dev pkg-config libxml2 libxml2-dev libfuse-dev libunwind8-dev
[/cc]
配置cloudfs [cc lang=”bash”]
vi /usr/local/cloudfs/conf/cloudfs.conf
[/cc]
需要配置的项目有： HOST 、ID 、KEY 、BUCKET 等 4 项必须；若干可选项。
测试 [cc lang=”bash”]
# Start cloudfs
service cloudfs start
service cloudfs status
# 目录和文件测试，在 OSS 控制台会看到相应变化
mkdir /mnt/oss/test
touch /mnt/oss/test/test.txt
[/cc]
迁移和设置媒体库 [cc lang=”bash”]
# 设置 WordPress 媒体库位置
cd /mnt/oss</description>
    </item>
    
    <item>
      <title>将 WordPress 迁移到 阿里云</title>
      <link>/post/2015/08/21/2015-08-21-wordpress-cloud/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/08/21/2015-08-21-wordpress-cloud/</guid>
      <description>最近将国外的主机迁移到了阿里云（参见：Site Changelog）。没办法，GFW太厉害了。留在外面只能做僵尸网站。
本文简要介绍了将WordPress迁移到云服务器ECS、云数据库RDS，域名绑定到云解析的方法。
如果要购买 ECS 云服务器，使用我的邀请码（U6FOVY，有效期截止 2015-11-30）可以得到 九折 优惠。
新服务器 安装LAMP：Ubuntu快速安装 LAMP
安装phpmyadmin：
[cc lang=”bash”]
sudo apt-get install phpmyadmin
ln -s /usr/share/phpmyadmin/ /var/www/html/phpmyadmin
[/cc]
旧服务器 WordPress整站打包下载。
使用一个插件生成数据库备份wp-DB-backup：wp_backup.sql.gz
迁移 上传整站到/var/www/html，只需要修改wp-config.php更新数据库信息。
打开http://newsite.com/phpmyadmin，创建一个数据库，将wp_backup.sql.gz 导入（import）。
进入options工作表，更新home和siteurl的值。
[cc lang=”mysql”]
mysql&amp;gt; use wordpress;
mysql&amp;gt; source wp.sql;
mysql&amp;gt; update `wp1_options` set `option_value` = “http://bio-spring.top/” where `option_name` = “siteurl”;
mysql&amp;gt; update `wp1_options` set `option_value` = “http://bio-spring.top/” where `option_name` = “home”;
[/cc]
使用云数据库 RDS 在RDS控制面板创建database，然后登录到RDS，同上设置。
[cc lang=”bash”]
bash$ mysql -uuser -ppasswd -husername.</description>
    </item>
    
    <item>
      <title>the_content()和the_excerpt()</title>
      <link>/post/2012/06/05/2012-06-05-the_content-the_excerpt/</link>
      <pubDate>Tue, 05 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/06/05/2012-06-05-the_content-the_excerpt/</guid>
      <description>这是wordpress中用以提取post内容的常用函数。它们用法基本相同，很多时候可以相互取代，分别用于显示post全部内容和post摘要。
然而，事实上在应用中它们最大的区别在于，前者输出格式化的内容，而后者则输出文字（格式错乱，没有超链接，换行，样式定义等）。所以，大多数时候，我只用前一个函数。
有些主题作者喜欢用the_excerpt()（特别是在分类列表中），我常常将其改为the_content()。
the_content Display the post content.
void the_content ([string $more_link_text = null], [bool $stripteaser = false])
string $more_link_text: Optional. Content for when there is more text.
bool $stripteaser: Optional. Strip teaser content before the more text. Default is false.
the_excerpt Display the post excerpt.
uses: apply_filters() – Calls ‘the_excerpt’ hook on post excerpt.
void the_excerpt ()</description>
    </item>
    
    <item>
      <title>使用poEdit汉化wordpress插件、主题攻略</title>
      <link>/post/2012/02/26/2012-02-26-poedit-wordpress-plugins/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/02/26/2012-02-26-poedit-wordpress-plugins/</guid>
      <description>关于“.pot”文档、“.po”文档和“*.mo”文档的来历见上面图片。
简而言之，这是一个开源软件本地化（或者国际化）的系统。而且是一个能够自动化运行的系统。使用该系统仅仅需要一个前提，就是在调用文本相关的函数时遵循一个特定的约定。例如WordPress 使用 _e 和 __ 函数来本地化。如下所示：
[cc lang=”php”][/cc]
现在要汉化一个插件或者主题，就打开源文件，看看是否存在这样的语句。如果存在，则进入下一步。
先简介一下（http://www.jinbo123.com/2503.html）：
一、三种文件
.po文件，.mo文件，.pot文件是由gettext程序生成或者使用的源代码和编译结果。
1、.pot文件
是一种模板文件，其实质与.po文件一样，其中包含了从源代码中提取所有的翻译字符串的列表。
2、.po文件
各语言对应的po文件，比如中文就是zh_CN.po，法语就是fr.po文件。
PO是Portable Object（可移植对象）的缩写形式，它是面向翻译人员的、提取于源代码的一种资源文件。
.po文件可以用任何编辑器如poEdit，vi，Emacs，editplus打开，交给翻译人员来将其中的文字翻译成本国语言。
3.mo文件
mo文件是一个二进制文件，不能直接编辑。
MO是Machine Object（机器对象）的缩写形式，它是面向计算机的、由.po文件通过GNU gettext工具包编译而成的二进制文件，应用程序通过读取.mo文件使自身的界面转换成用户使用的语言，如简体中文。
可以用工具如msgunfmt命令将.mo文件反编译为.po文件。
一般情况下，我们在汉化的时候会碰上如下几种情况：
二、几种情形
1、如果程序本身提供了.po文件，直接使用poEdit汉化，并自动生成.mo文件。
2、如果程序提供了.pot文件，复制一份并更改后缀名为.po，再使用poEdit汉化，最后生成.mo文件。
3、程序既没有提供.po文件，也没有提供.pot文件，只提供了.mo文件，那么将.mo文件转换成.po文件。
汉化需要用到的软件就是PoEdit（http://www.poedit.net/）。参见http://laycher.com/?p=738
将汉化的文档命名为“zh_CN.po”和“zh_CN.mo”，复制到插件或主题中的“languages”文件夹中，如没有该文件夹，则新建一个。
然后，刷新一下，就会看到主题被汉化了（注意：wordpress设置的语言需为zh_CN）。</description>
    </item>
    
    <item>
      <title>WordPress开发实录</title>
      <link>/post/2012/02/25/2012-02-25-wordpress-diy/</link>
      <pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/02/25/2012-02-25-wordpress-diy/</guid>
      <description>如果遇到后台编辑文件时没有发现“更新文件”菜单时，可能是文件没有权限被“www-data”用户修改造成的；
WordPress主题的执行顺序，见：http://ihacklog.com/php/wordpress/dig-into-wordpress/the-wordpress-theme-files-execution-hierarchy.html
更改一个主题CSS文件时，新建一个CSS文档，然后import到主题默认CSS文档中。由于CSS定义中“后来居上”，所以应当插入在最后面，以免引起冲突。如果冲突，可以尝试加入“!important”来提升优先级。
关于wordpress插件form-manager的使用，不要使用其“condition”，而应当自行编写脚本。可以使用jQuery，然后将脚本作为Note添加（插入一个script区块）。同时将用到的CSS也作为一个Note添加（CSS其实最好位于Header中，据说这样可以加快网页的渲染速度，而js则可以放在最后）。这样做的结果就是只有在有form的页面中，才会需要载入相应的js库，减少对其它页面载入速度的影响。
form-manager模板函数中的利用nickname获取数值函数很好用。然而对于文件上传来说，得到的是一个含有文件名和其它信息的数组，可以使用以下语句得到想要的东西。
http://wordpress.org/support/topic/plugin-wordpress-form-manager-get-image-into-template
[cc lang=”php”]</description>
    </item>
    
  </channel>
</rss>
