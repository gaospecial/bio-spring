<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Hugo Prose</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Hugo Prose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>发布 `ggVennDiagram` 0.5.0</title>
      <link>/post/2021/03/01/release-ggvenndiagram-0-5-0/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/03/01/release-ggvenndiagram-0-5-0/</guid>
      <description>昨天正式发布了 ggVennDiagram 0.5.0. 上一个在 CRAN 的版本是 0.3，之所以中间跳了 一下，是因为当初自己还不清楚如何更新已经发布在 CRAN 上的 R 包。
这次是通过 devtools::release() 来自动化发布的。不得不说这个工具的出现，真的大大 方便了 R 包的开发。对包作者的崇敬之情油然而生。
简单来说还是分成以下几个步骤：
更新软件包的功能； 按照 release() 函数的指引一步步完成发布前的准备工作，并将其提交到 CRAN； 到作者邮箱中检查 CRAN 发来的确认邮件，确认提交； 如果 CRAN 有邮件回复，解决其提出来的问题； 最后，CRAN 会在 R 包上线后发出一封邮件通知； 这时，回到自己的 GitHub，为新版本创建一个 tag。 新版本刚刚上线，可以看到只有源代码更新了，Windows 等系统下的二进制还没有编译更新。
到如今，才算是真正走通了 R 包开发的流程。</description>
    </item>
    
    <item>
      <title>为 R 代理</title>
      <link>/post/2019/10/28/r-proxy/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/10/28/r-proxy/</guid>
      <description>今天想用 scholar 包抓一下自己的 Google Scholar profile，发现不翻墙打不开。
要设代理，参考了 @GuangchuangYu 发表的一次解决所有代理问题， 却仍然没有解决自己的问题。
因为我用的是 Windows，proxychains 却只能用于类 Unix 系统。
经过 3 个小时的探索，终于发现了一个途径，居然比 proxychains 还要简单很多。
那就是，设置 Renviron 环境变量的方法。
新建一个 Renviron 文件，内容如下：
CURL_SSL_BACKEND=openssl http_proxy=http://127.0.0.1:8080 https_proxy=http://127.0.0.1:8080 这个文件：
如果放在 &amp;ldquo;~/.Renviorn&amp;rdquo; 下面，那么每次 R 运行的时候都会设置使用相应的代理。 如果放在 R project 文件夹下面（如“/path/to/project/.Renviron”），那么只对相应的项目生效。 如果放在一个普通文件中（如“proxy.Renviron”），则只在调用的时候生效。 采用最后一种方法，在需要设置代理的脚本中，加入一行，就可以确保后续访问网络时使用代理设置。
readRenviron(&amp;quot;proxy.Renviron&amp;quot;) 说明 网上有很多关于设置 http(s)_proxy 变量来代理上网的方法，但是只设置这项是没有用的。
这是因为，当 R 从网上下载时，curl 包默认是采用的 Windows Cert Store 的后端，而该后端是不支持 https 协议代理上网的。
rcurl SSL Backends Secure Channel OpenSSL trust certificates Windows Cert Store curl-ca-bundle.crt file works on corporate networks Usually Yes Maybe not support http proxy server Yes Yes support https proxy server No Yes support client certificate authentication No Yes 因此，需要先设置 CURL_SSL_BACKEND=openssl，然后在设置代理服务器。</description>
    </item>
    
    <item>
      <title>ggplot2作图中不使用科学计数法</title>
      <link>/post/2017/11/16/2017-11-16-ggplot2-no-scinum/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/11/16/2017-11-16-ggplot2-no-scinum/</guid>
      <description>科学计数法（1E+5）这种形式不适合大多数图片。拒绝使用的方法有很多，一个比较简单粗暴的方法是设置scipen参数：options(scipen = 200) 。
非常好用。</description>
    </item>
    
  </channel>
</rss>
